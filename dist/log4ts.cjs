"use strict";var h=Object.defineProperty;var f=(e,t,r)=>t in e?h(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r;var s=(e,t,r)=>(f(e,typeof t!="symbol"?t+"":t,r),r);Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});var g=(e=>(e.Debug="DEBUG",e.Info="INFO",e.Warning="WARN",e.Error="ERROR",e))(g||{});class a{constructor(t="ROOT"){s(this,"name");this.name=t}get time(){const t=new Date,r=`${t.getFullYear()}`.padStart(4,"0"),i=`${t.getMonth()}`.padStart(2,"0"),c=`${t.getDay()}`.padStart(2,"0"),l=`${t.getHours()}`.padStart(2,"0"),u=`${t.getMinutes()}`.padStart(2,"0"),$=`${t.getSeconds()}`.padStart(2,"0"),d=`${t.getMilliseconds()}`.padStart(3,"0");return`${r}-${i}-${c} ${l}:${u}:${$}.${d}`}getPrefix(t){return`${this.time} {${this.name}} [${t}] `}debug(...t){console.debug(this.getPrefix("DEBUG"),...t)}info(...t){console.info(this.getPrefix("INFO"),...t)}warn(...t){console.warn(this.getPrefix("WARN"),...t)}error(...t){console.error(this.getPrefix("ERROR"),...t)}}const o=class o{static getLogger(t){if(o.loggers.has(t))return o.loggers.get(t);const r=new a(t);return o.loggers.set(t,r),r}};s(o,"loggers",new Map);let n=o;exports.LogLevel=g;exports.Logger=a;exports.LoggerFactory=n;
